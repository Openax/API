openapi: 3.0.0
info:
  title: Openax
  description: |
    Openax API
  termsOfService: 'https://openax.com'
  contact:
    email: apiteam@openax.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
paths:
  /bank-register:
    post:
      summary: Add a new account
      operationId: addAccount
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/registerIndividual'
                - $ref: '#/components/schemas/registerCorporate'
      responses:
        '405':
          description: Invalid input
      parameters: []
      description: for Register a new account ffffggggg
  /bank/beneficiary/individual:
    post:
      summary: Add a new beneficiary individual
      operationId: addBeneficiaryIndividual
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/beneficiaryIndividual'
      responses:
        '200':
          description: successfully
        '400':
          description: '400'
      tags:
        - Beneficiaries
      parameters: []
  /bank/beneficiary/corporate:
    post:
      summary: Add a new beneficiary Corporate
      operationId: addBeneficiaryCorporate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/beneficiaryCorporate'
      responses:
        '405':
          description: Invalid input
      parameters: []
  /bank/beneficiary:
    get:
      summary: get all beneficiaries
      operationId: getAllBeneficiaries
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/arrayOfBeneficiaries'
        '400':
          description: Invalid request
        '404':
          description: No beneficiaries found
      parameters: []
  '/bank/beneficiary/{id}':
    get:
      summary: Find beneficiary by ID
      operationId: getBeneficiaryById
      parameters:
        - name: id
          in: path
          description: ID of beneficiary to return
          required: true
          schema:
            type: string
            format: uuidv4
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/beneficiary'
        '400':
          description: Invalid ID supplied
        '404':
          description: Beneficiary not found
  '/bank/beneficiary/individual/update/{id}':
    post:
      summary: Update an existing individual beneficiary
      operationId: updateBeneficiaryIndividual
      parameters:
        - name: id
          in: path
          description: ID of beneficiary to update
          required: true
          schema:
            type: string
            format: uuidv4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/beneficiaryIndividual'
      responses:
        '405':
          description: Invalid input
  '/bank/beneficiary/corporate/update/{id}':
    post:
      summary: Update an existing corporate beneficiary
      operationId: updateBeneficiaryCorporate
      parameters:
        - name: id
          in: path
          description: ID of beneficiary to update
          required: true
          schema:
            type: string
            format: uuidv4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/beneficiaryCorporate'
      responses:
        '405':
          description: Invalid input
  '/bank/beneficiary/delete/{id}':
    post:
      summary: Delete a beneficiary by ID
      operationId: deleteBeneficiaryById
      parameters:
        - name: id
          in: path
          description: ID of beneficiary to delete
          required: true
          schema:
            type: string
            format: uuidv4
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Beneficiary not found
  /bank/transaction:
    get:
      summary: get all transactions
      operationId: getAllTransactions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/arrayOfTransactions'
        '400':
          description: Invalid request
        '404':
          description: No beneficiaries found
      tags:
        - Transactions
      parameters: []
  '/bank/transaction/{id}':
    get:
      summary: Find transaction by ID
      operationId: getTransactionById
      parameters:
        - name: id
          in: path
          description: ID of transaction to return
          required: true
          schema:
            type: string
            format: uuidv4
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
        '400':
          description: Invalid ID supplied
        '404':
          description: Transaction not found
  /bank/payments:
    get:
      summary: get all payments
      operationId: getAllPayments
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/arrayOfPayments'
        '400':
          description: Invalid request
        '404':
          description: No payments found
      parameters: []
    post:
      summary: Add a new payment
      operationId: addPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPayment'
      responses:
        '405':
          description: Invalid input
      parameters: []
  '/bank/payments/{id}':
    get:
      summary: Find payment by ID
      operationId: getPaymentById
      parameters:
        - name: id
          in: path
          description: ID of payment to return
          required: true
          schema:
            type: string
            format: uuidv4
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
        '400':
          description: Invalid ID supplied
        '404':
          description: Payment not found
      tags:
        - Payments
  '/bank/payment/canceled/{id}':
    post:
      summary: Delete a payment by ID
      operationId: deletePaymentsById
      parameters:
        - name: id
          in: path
          description: ID of payment to delete
          required: true
          schema:
            type: string
            format: uuidv4
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Payment not found
        '408':
          description: payment cannot be deleted
  /bank/fast-payment/:
    post:
      summary: Add a new fast-payment
      operationId: addFastPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createFastPayment'
      responses:
        '405':
          description: Invalid input
      parameters: []
  /newPath: {}
components:
  schemas:
    account:
      type: object
      required:
        - first_name
        - last_name
        - password
        - email
        - type
        - company_name
        - country
      properties:
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
        email:
          type: string
        type:
          type: string
          enum:
            - individual
            - corporate
        company_name:
          type: string
        country:
          type: string
    registerIndividual:
      type: object
      required:
        - first_name
        - last_name
        - password
        - email
        - type
        - country
      properties:
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
        email:
          type: string
        type:
          type: string
          default: individual
        country:
          type: string
    registerCorporate:
      type: object
      required:
        - first_name
        - last_name
        - password
        - email
        - type
        - company_name
        - country
      properties:
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
        email:
          type: string
        type:
          type: string
          default: corporate
        company_name:
          type: string
        country:
          type: string
    beneficiary:
      type: object
      required:
        - iban
        - bic
        - type
        - currency_id
      properties:
        id:
          type: string
          format: uuidv4
        iban:
          type: string
        bank_address:
          type: string
        bank_account_holder_name:
          type: string
        bank_name:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        bic:
          type: string
        name:
          type: string
        address:
          type: string
        city:
          type: string
        type:
          type: string
          enum:
            - individual
            - corporate
        bankcountry_id:
          type: string
          $ref: '#/components/schemas/country'
        company_name:
          type: string
        currency_id:
          $ref: '#/components/schemas/currency'
    country:
      type: object
    currency:
      type: object
    beneficiaryIndividual:
      type: object
      properties:
        iban:
          type: string
        bank_address:
          type: string
        bank_account_holder_name:
          type: string
        bank_name:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        bic:
          type: string
        name:
          type: string
        address:
          type: string
        city:
          type: string
        type:
          type: string
          default: individual
        bankcountry_id:
          format: ISO
          type: string
        currency_id:
          type: object
    beneficiaryCorporate:
      type: object
      properties:
        iban:
          type: string
        bank_address:
          type: string
        bank_account_holder_name:
          type: string
        bank_name:
          type: string
        bic:
          type: string
        name:
          type: string
        address:
          type: string
        city:
          type: string
        type:
          type: string
          default: corporate
        bankcountry_id:
          $ref: '#/components/schemas/country'
        currency_id:
          $ref: '#/components/schemas/currency'
    arrayOfBeneficiaries:
      type: array
      items:
        $ref: '#/components/schemas/beneficiary'
    payment:
      type: object
      properties:
        type:
          type: string
          enum:
            - debit
        amount:
          type: integer
        reason:
          type: string
        beneficiary_id:
          type: string
          $ref: '#/components/schemas/beneficiary'
        payment_date:
          type: string
        account_id:
          type: string
          $ref: '#/components/schemas/account'
        ledger:
          type: string
          $ref: '#/components/schemas/ledger'
        methode:
          type: string
          enum:
            - FFCCTRNS
            - IFCCTRNS
    ledger:
      type: object
    transaction:
      type: object
      properties:
        type:
          type: string
        status:
          type: string
        reason:
          type: string
        amount:
          type: integer
        method:
          type: string
          enum:
            - FFCCTRNS
            - IFCCTRNS
            - PACS003D
        old_balance:
          type: integer
    arrayOfTransactions:
      type: array
      items:
        $ref: '#/components/schemas/transaction'
    arrayOfPayments:
      type: array
      items:
        $ref: '#/components/schemas/payment'
    createPayment:
      type: object
      properties:
        amount:
          type: integer
        reason:
          type: string
        payment_date:
          type: string
        method:
          type: string
          default: FFCCTRNS
    createFastPayment:
      type: object
      properties:
        amount:
          type: integer
        reason:
          type: string
        method:
          type: string
          default: IFCCTRNS
  links: {}
  callbacks: {}
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://sandboxcrm.openax.com'
security: []
tags: []
